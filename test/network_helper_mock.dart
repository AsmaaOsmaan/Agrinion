// Mocks generated by Mockito 5.3.2 from annotations
// in agriunion/test/Reports/Data/Networking/sales_reports/sales_reports_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:agriunion/App/Network/network_helper.dart' as _i3;
import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMultipartFile_0 extends _i1.SmartFake implements _i2.MultipartFile {
  _FakeMultipartFile_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NetworkHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkHelper extends _i1.Mock implements _i3.NetworkHelper {
  MockNetworkHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<dynamic> get({
    required String? url,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #url: url,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> post({
    required String? url,
    required Map<String, String>? headers,
    Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [],
          {
            #url: url,
            #headers: headers,
            #body: body,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> postMedia({
    required String? url,
    required Map<String, dynamic>? body,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postMedia,
          [],
          {
            #url: url,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> patch({
    required String? url,
    required Map<String, String>? headers,
    Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [],
          {
            #url: url,
            #headers: headers,
            #body: body,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> patchMedia({
    required String? url,
    required Map<String, dynamic>? body,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchMedia,
          [],
          {
            #url: url,
            #body: body,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> delete({
    required String? url,
    required Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #url: url,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> getDownload({
    required String? url,
    required Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDownload,
          [],
          {
            #url: url,
            #headers: headers,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i4.Future<dynamic> postDownload({
    required String? url,
    required Map<String, String>? headers,
    required Map<String, dynamic>? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postDownload,
          [],
          {
            #url: url,
            #headers: headers,
            #body: body,
          },
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
  @override
  _i2.MultipartFile convertToMultiPart(_i5.File? file) => (super.noSuchMethod(
        Invocation.method(
          #convertToMultiPart,
          [file],
        ),
        returnValue: _FakeMultipartFile_0(
          this,
          Invocation.method(
            #convertToMultiPart,
            [file],
          ),
        ),
      ) as _i2.MultipartFile);
}
